# -*- coding: utf-8 -*-

"""
Module implementing MainWindow.
"""

from PyQt4  import QtCore, QtGui, QtOpenGL
from PyQt4.QtSvg import QGraphicsSvgItem 
from PyQt4.QtOpenGL import QGLWidget
from Ui_clock import Ui_MainWindow
from PyQt4.QtCore import pyqtSignature

    
class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """
    Class documentation goes here.
    """
    def __init__(self, parent = None):
        """
        Constructor
        """
        QtGui.QMainWindow.__init__(self, parent)
        self.setupUi(self)
        self.themeDir="/hometheme/Cockpit/"
        self.theme=["clock-drop-shadow.svg", 
                               "clock-face.svg", 
                               "clock-face-shadow.svg", 
                                "clock-marks.svg", 
                                "clock-frame.svg", 
                                "clock-glass.svg"
                             ]  
     
     
        self.x=400
        self.y=240
     #Variables that keep track of the angle of the hands, and  Time
        self.pHour=0
        self.pMinute=0
        self.pSecond=0
        self.secTimer = QtCore.QBasicTimer()
        self.minTimer=QtCore.QTimer()
        self.calibrateTimer=QtCore.QTimer()
        #The second hand counter  166=6 beats per second, 1000 =1 beat per sec
        self.secTimerType=166.9
        self.secTimerBeat=1
        #Variables that keep track of scene
        self.sceneWidth=0
        self.sceneHeight=0
        self.centerx=0
        self.centery=0
        self.xoffset=10
        self.setWindowTitle('Nclock')
        self.themeDir="/home/user/MyDocs/Nclocktheme/"
        
        #Initialize the Graphics Scene, Graphicsview is setup in QtDesigner UI
        self.scene = QtGui.QGraphicsScene()
        
        #Load the Clock face
        self.svgItem=clockPart("/home/user/MyDocs/Nclocktheme/clock-face.svg")
        self.renderer=self.svgItem.renderer()
        self.scene.addItem(self.svgItem)
         #get the bounding box for the scene
        self.rect=self.scene.itemsBoundingRect()
        
        self.sceneWidth=self.rect.width()
        self.sceneHeight=self.rect.height()
        self.centerx=self.sceneWidth/2
        self.centery=self.sceneHeight/2
        self.grView.centerOn(self.centerx, self.centery)
        print self.sceneWidth, self.sceneHeight
        #change the vieport on the face
        self.svgRect=QtCore.QRect()
        self.svgRect.setX(0)
        self.svgRect.setY(0)
        #Note the system keeps aspect ratios of the X and y Viewports and scales tje scene into it
        self.svgRect.setWidth(200)
        self.svgRect.setHeight(200)
        #setup the Viewbox
        self.renderer.setViewBox(self.svgRect)
        #self.svgHour.setPos(self.centerx+self.xoffset, self.centery+self.yoffset)

        #Paint the Scene and center
        self.rect=self.scene.itemsBoundingRect()
        height=self.rect.height()
        width=self.rect.width()
        if width>height: dimension=width
        
        else :dimension =height
        self.scene.setSceneRect(0, 0, dimension, dimension)
        self.rect=self.scene.itemsBoundingRect()
        
        self.grView.setScene(self.scene)
        #self.grView.scale(3, 3)
        
    @pyqtSignature("")
    # sets the second hands tick to Quartz style
    def on_actionQuartz_triggered(self):
        self.secTimerType=1000
        self.secTimerBeat=6
        self.calibrateTime()
        
    @pyqtSignature("")
    #Sets the seconds hand to Automatic smooth style
    def on_actionAutomatic_triggered(self):
        self.secTimerType=166.9
        self.secTimerBeat=1
        self.calibrateTime()
        
    @pyqtSignature("")
    #Sets the seconds hand standstill
    def on_actionEco_triggered(self):
        self.secTimer.stop()
        self.calibrateTimer.stop()
        self.svgSecond.resetTransform()
        self.svgSecond.rotate(-90)
        
    @pyqtSignature("")
    #Sets the seconds hand to Automatic smooth style
    def on_actionZoom_In_triggered(self):
        self.grView.scale(1.1, 1.1)
        self.grView.setScene(self.scene)
    
    @pyqtSignature("")
    #Sets the seconds hand to Automatic smooth style
    def on_actionZoom_Out_triggered(self):
        self.grView.scale(0.9, 0.9)
        self.grView.setScene(self.scene)


def __init__(self, parent = None):
        """
        Constructor
        """
        QMainWindow.__init__(self, parent)
        self.setupUi(self)
    
    
 #subclass QGraphicsSvgItem   
class clockPart(QGraphicsSvgItem, QtCore.QString):
    def __init__(self, *args):
        apply(QGraphicsSvgItem.__init__, (self,) + args)

        
    #def boundingRect(self):return QtCore.QRectF(0, 0, 100, 100)

    #def paint(self, painter, option, widget=None):pass

        
    def mouseMoveEvent(self, event):
        self.mousePressPos = QtCore.QPoint()
        self.rotate(1)
        event.accept()

    def mouseReleaseEvent(self, event):
        self.mousePressPos = QtCore.QPoint()
        self.keyPressed ="Mouse Released"
        event.accept()
        print"mouse released"
        
    def mousePressEvent(self, event):
        self.mousePressPos = QtCore.QPoint()
    
        quit()
        self.update()
        event.accept()
